//
// engine.cpp : Put all your graphics stuff in this file. This is kind of the graphics module.
// In here, you should type all your OpenGL commands, and you can also type code to handle
// input platform events (e.g to move the camera or react to certain shortcuts), writing some
// graphics related GUI options, and so on.
//

#define MIPMAP_BASE_LEVEL 0
#define MIPMAP_MAX_LEVEL 4

#include "assimp.h"
#include "buffers.h"
#include <imgui.h>
#include <stb_image.h>
#include <stb_image_write.h>
#include <assimp/cimport.h>
#include <assimp/scene.h>
#include <assimp/postprocess.h>
#include "EditorConsole.h"

void OnGlError(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* message, const void* userParam)
{
    if (severity == GL_DEBUG_SEVERITY_NOTIFICATION)
        return;

    ELOG("OpenGL debug message: %s", message);

    switch (source)
    {
    case GL_DEBUG_SOURCE_API: ELOG(" - source: GL_DEBUG_SOURCE_API");                           break;  // Calls to OpenGL API
    case GL_DEBUG_SOURCE_WINDOW_SYSTEM: ELOG(" - source: GL_DEBUG_SOURCE_WINDOW_SYSTEM");       break;  // Calls to a window-system API
    case GL_DEBUG_SOURCE_SHADER_COMPILER: ELOG(" - source: GL_DEBUG_SOURCE_SHADER_COMPILER");   break;  // A compiler for a shading language
    case GL_DEBUG_SOURCE_THIRD_PARTY: ELOG(" - source: GL_DEBUG_SOURCE_THIRD_PARTY");           break;  // An application associated to OpenGL
    case GL_DEBUG_SOURCE_APPLICATION: ELOG(" - source: GL_DEBUG_SOURCE_APPLICATION");           break;  // Generated by the user of this application
    case GL_DEBUG_SOURCE_OTHER: ELOG(" - source: GL_DEBUG_SOURCE_OTHER");                       break;  // Some source that is not any of these
    }

    switch (type)
    {
    case GL_DEBUG_TYPE_ERROR: ELOG(" - type: GL_DEBUG_TYPE_ERROR");                             break;  // An error, typically from the API
    case GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR: ELOG(" - type: GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR"); break;  // Some behaviour marked deprecated
    case GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR: ELOG(" - type: GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR");   break;  // Something has invoked undefined behaviour
    case GL_DEBUG_TYPE_PORTABILITY: ELOG(" - type: GL_DEBUG_TYPE_PORTABILITY");                 break;  // Some functionality the user relies upon
    case GL_DEBUG_TYPE_PERFORMANCE: ELOG(" - type: GL_DEBUG_TYPE_PERFORMANCE");                 break;  // Code has triggered possible performance problems
    case GL_DEBUG_TYPE_MARKER: ELOG(" - type: GL_DEBUG_TYPE_MARKER");                           break;  // Command stream annotation
    case GL_DEBUG_TYPE_PUSH_GROUP: ELOG(" - type: GL_DEBUG_TYPE_PUSH_GROUP");                   break;  // Group pushing
    case GL_DEBUG_TYPE_POP_GROUP: ELOG(" - type: GL_DEBUG_TYPE_POP_GROUP");                     break;  // Group pop
    case GL_DEBUG_TYPE_OTHER: ELOG(" - type: GL_DEBUG_TYPE_OTHER");                             break;  // Some type that is not any of these
    }

    switch (source)
    {
    case GL_DEBUG_SEVERITY_HIGH: ELOG(" - severity: GL_DEBUG_SEVERITY_HIGH");                   break;  // All OpenGL errors, shader cimpilation/linking
    case GL_DEBUG_SEVERITY_MEDIUM: ELOG(" - severity: GL_DEBUG_SEVERITY_MEDIUM");               break;  // Major performance warnings, shader compilation
    case GL_DEBUG_SEVERITY_LOW: ELOG(" - severity: GL_DEBUG_SEVERITY_LOW");                     break;  // Redundant state change performance warning
    }
}

GLuint CreateProgramFromSource(String programSource, const char* shaderName)
{
    GLchar  infoLogBuffer[1024] = {};
    GLsizei infoLogBufferSize = sizeof(infoLogBuffer);
    GLsizei infoLogSize;
    GLint   success;

    char versionString[] = "#version 430\n";
    char shaderNameDefine[128];
    sprintf(shaderNameDefine, "#define %s\n", shaderName);
    char vertexShaderDefine[] = "#define VERTEX\n";
    char fragmentShaderDefine[] = "#define FRAGMENT\n";

    const GLchar* vertexShaderSource[] = {
        versionString,
        shaderNameDefine,
        vertexShaderDefine,
        programSource.str
    };
    const GLint vertexShaderLengths[] = {
        (GLint) strlen(versionString),
        (GLint) strlen(shaderNameDefine),
        (GLint) strlen(vertexShaderDefine),
        (GLint) programSource.len
    };
    const GLchar* fragmentShaderSource[] = {
        versionString,
        shaderNameDefine,
        fragmentShaderDefine,
        programSource.str
    };
    const GLint fragmentShaderLengths[] = {
        (GLint) strlen(versionString),
        (GLint) strlen(shaderNameDefine),
        (GLint) strlen(fragmentShaderDefine),
        (GLint) programSource.len
    };

    GLuint vshader = glCreateShader(GL_VERTEX_SHADER);
    glShaderSource(vshader, ARRAY_COUNT(vertexShaderSource), vertexShaderSource, vertexShaderLengths);
    glCompileShader(vshader);
    glGetShaderiv(vshader, GL_COMPILE_STATUS, &success);
    if (!success)
    {
        glGetShaderInfoLog(vshader, infoLogBufferSize, &infoLogSize, infoLogBuffer);
        ELOG("glCompileShader() failed with vertex shader %s\nReported message:\n%s\n", shaderName, infoLogBuffer);
    }

    GLuint fshader = glCreateShader(GL_FRAGMENT_SHADER);
    glShaderSource(fshader, ARRAY_COUNT(fragmentShaderSource), fragmentShaderSource, fragmentShaderLengths);
    glCompileShader(fshader);
    glGetShaderiv(fshader, GL_COMPILE_STATUS, &success);
    if (!success)
    {
        glGetShaderInfoLog(fshader, infoLogBufferSize, &infoLogSize, infoLogBuffer);
        ELOG("glCompileShader() failed with fragment shader %s\nReported message:\n%s\n", shaderName, infoLogBuffer);
    }

    GLuint programHandle = glCreateProgram();
    glAttachShader(programHandle, vshader);
    glAttachShader(programHandle, fshader);
    glLinkProgram(programHandle);
    glGetProgramiv(programHandle, GL_LINK_STATUS, &success);
    if (!success)
    {
        glGetProgramInfoLog(programHandle, infoLogBufferSize, &infoLogSize, infoLogBuffer);
        ELOG("glLinkProgram() failed with program %s\nReported message:\n%s\n", shaderName, infoLogBuffer);
    }

    glUseProgram(0);

    glDetachShader(programHandle, vshader);
    glDetachShader(programHandle, fshader);
    glDeleteShader(vshader);
    glDeleteShader(fshader);

    return programHandle;
}

u32 LoadProgram(App* app, const char* filepath, const char* programName)
{
    String programSource = ReadTextFile(filepath);

    Program program = {};
    program.handle = CreateProgramFromSource(programSource, programName);
    program.filepath = filepath;
    program.programName = programName;
    program.lastWriteTimestamp = GetFileLastWriteTimestamp(filepath);

    GLint attributeCount;
    glGetProgramiv(program.handle, GL_ACTIVE_ATTRIBUTES, &attributeCount);

    for (u32 i = 0; i < attributeCount; ++i)
    {
        const GLsizei bufSize = 16; 
        GLchar attributeName[bufSize]; 
        GLsizei attributeNameLength; 

        GLint attributeSize; 
        GLenum attributeType; 

        glGetActiveAttrib(program.handle, i, bufSize, &attributeNameLength, &attributeSize, &attributeType, attributeName);

        u8 attributeLocation = glGetAttribLocation(program.handle, attributeName);
        printf("Location #%d Type: %u Name: %s\n", i, attributeLocation, attributeName);
        program.vertexInputLayout.attributes.push_back({ attributeLocation, (u8)attributeSize });
    }

    app->programs.push_back(program);
    return app->programs.size() - 1;
}

Image LoadImage(const char* filename)
{
    Image img = {};
    stbi_set_flip_vertically_on_load(true);
    img.pixels = stbi_load(filename, &img.size.x, &img.size.y, &img.nchannels, 0);
    if (img.pixels)
    {
        img.stride = img.size.x * img.nchannels;
    }
    else
    {
        ELOG("Could not open file %s", filename);
    }
    return img;
}

void FreeImage(Image image)
{
    stbi_image_free(image.pixels);
}

GLuint CreateTexture2DFromImage(Image image)
{
    GLenum internalFormat = GL_RGB8;
    GLenum dataFormat     = GL_RGB;
    GLenum dataType       = GL_UNSIGNED_BYTE;

    switch (image.nchannels)
    {
        case 3: dataFormat = GL_RGB; internalFormat = GL_RGB8; break;
        case 4: dataFormat = GL_RGBA; internalFormat = GL_RGBA8; break;
        default: ELOG("LoadTexture2D() - Unsupported number of channels");
    }

    GLuint texHandle;
    glGenTextures(1, &texHandle);
    glBindTexture(GL_TEXTURE_2D, texHandle);
    glTexImage2D(GL_TEXTURE_2D, 0, internalFormat, image.size.x, image.size.y, 0, dataFormat, dataType, image.pixels);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR_MIPMAP_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    glGenerateMipmap(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, 0);

    return texHandle;
}

u32 LoadTexture2D(App* app, const char* filepath)
{
    for (u32 texIdx = 0; texIdx < app->textures.size(); ++texIdx)
        if (app->textures[texIdx].filepath == filepath)
            return texIdx;

    Image image = LoadImage(filepath);

    if (image.pixels)
    {
        Texture tex = {};
        tex.handle = CreateTexture2DFromImage(image);
        tex.filepath = filepath;

        u32 texIdx = app->textures.size();
        app->textures.push_back(tex);

        FreeImage(image);
        return texIdx;
    }
    else
    {
        return UINT32_MAX;
    }
}

GLuint FindVAO(Mesh& mesh, u32 submeshIndex, const Program& program)
{
    Submesh& submesh = mesh.submeshes[submeshIndex];

    // Try finding a vao for this submesh/program
    for (u32 i = 0; i < (u32)submesh.vaos.size(); ++i)
        if (submesh.vaos[i].programHandle == program.handle)
            return submesh.vaos[i].handle;

    // Create a new vao for this submesh/program
    GLuint vaoHandle = 0;
    glGenVertexArrays(1, &vaoHandle);
    glBindVertexArray(vaoHandle);

    glBindBuffer(GL_ARRAY_BUFFER, mesh.vertexBufferHandle);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, mesh.indexBufferHandle);

    // We have to link all vertex inputs attributes to attributes in the vertex buffer
    for (u32 i = 0; i < program.vertexInputLayout.attributes.size(); ++i)
    {
        bool attributeWasLinked = false;

        for (u32 j = 0; j < submesh.vertexBufferLayout.attributes.size(); ++j)
        {
            if (program.vertexInputLayout.attributes[i].location == submesh.vertexBufferLayout.attributes[j].location)
            {
                const u32 index = submesh.vertexBufferLayout.attributes[j].location;
                const u32 ncomp = submesh.vertexBufferLayout.attributes[j].componentCount;
                const u32 offset = submesh.vertexBufferLayout.attributes[j].offset + submesh.vertexOffset; // attribute offset + vertex offset
                const u32 stride = submesh.vertexBufferLayout.stride;
                glVertexAttribPointer(index, ncomp, GL_FLOAT, GL_FALSE, stride, (void*)(u64)offset);
                glEnableVertexAttribArray(index);

                attributeWasLinked = true;
                break;
            }
        }

        assert(attributeWasLinked); // The submesh should provide an attribute for each vertex inputs
    }

    glBindVertexArray(0);

    // Store it in the list of vaos for this submesh
    Vao vao = { vaoHandle, program.handle };
    submesh.vaos.push_back(vao);

    return vaoHandle;
}

void CreateEntity(App* app, vec3 position, u32 modelIndex, u32 localParamsOffset, u32 localParamsSize)
{
    Entity entity = {};
    entity.worldMatrix = glm::translate(glm::mat4(1.0), vec3(position));
    entity.modelIndex = modelIndex;
    entity.localParamsOffset = localParamsOffset;
    entity.localParamsSize = localParamsSize;

    if (modelIndex == app->sphere)
    {
        entity.worldMatrix = glm::scale(entity.worldMatrix, vec3(0.5, 0.5, 0.5));
    }
    else if (modelIndex == app->floor)
    {
        entity.worldMatrix = glm::scale(entity.worldMatrix, vec3(100.0, 100.0, 100.0));
    }
    else if (modelIndex == app->cat)
    {
        entity.worldMatrix = glm::scale(entity.worldMatrix, vec3(0.1, 0.1, 0.1));
        entity.worldMatrix = glm::rotate(entity.worldMatrix, -PI*0.5f, vec3(1.0, 0.0, 0.0));
    }

    app->entities.push_back(entity);
}

void CreateDirectionalLight(App* app, vec3 color, vec3 direction)
{
    Light light = {};
    light.type = LightType_Directional;
    light.color = color;
    light.direction = direction;
    light.position = vec3(0.0);
    app->lights.push_back(light);
}

void CreatePointLight(App* app, vec3 color, vec3 position)
{
    Light light = {};
    light.type = LightType_Point;
    light.color = color;
    light.position = position;
    light.direction = vec3(1.0);
    app->lights.push_back(light);

    CreateEntity(app, position, app->sphere, 0, 0);
}

void CheckFrameBufferStatus()
{
    GLenum frameBufferStatus = glCheckFramebufferStatus(GL_FRAMEBUFFER);
    if (frameBufferStatus != GL_FRAMEBUFFER_COMPLETE)
    {
        switch (frameBufferStatus)
        {
        case GL_FRAMEBUFFER_UNDEFINED:                      ELOG("GL_FRAMEBUFFER_UNDEFINED"); break;
        case GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT:          ELOG("GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT"); break;
        case GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:  ELOG("GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"); break;
        case GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER:         ELOG("GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER"); break;
        case GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER:         ELOG("GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER"); break;
        case GL_FRAMEBUFFER_UNSUPPORTED:                    ELOG("GL_FRAMEBUFFER_UNSUPPORTED"); break;
        case GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE:         ELOG("GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE"); break;
        case GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS:       ELOG("GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS"); break;
        default: ELOG("Unknown framebuffer status error");
        }
    }
}

float lerp(float a, float b, float f)
{
    return a + f * (b - a);
}

void Init(App* app)
{
    if (GLVersion.major > 4 || (GLVersion.major == 4 && GLVersion.minor >= 3))
    {
        glDebugMessageCallback(OnGlError, app);
    }

    // TODO: Initialize your resources here!
    sprintf(app->openGlVersion, "OpenGL version: %s", glGetString(GL_VERSION));
    sprintf(app->gpuName, "GPU: %s", glGetString(GL_RENDERER));
    sprintf(app->vendor, "GPU: %s", glGetString(GL_VENDOR));
    sprintf(app->glslVersion, "GPU: %s", glGetString(GL_SHADING_LANGUAGE_VERSION));

    CreateFboTexture(app->finalRenderAttachmentTexture, app->displaySize, GL_UNSIGNED_BYTE);
    CreateFboTexture(app->normalsAttachmentTexture,     app->displaySize, GL_UNSIGNED_BYTE);
    CreateFboTexture(app->albedoAttachmentTexture,      app->displaySize, GL_UNSIGNED_BYTE);
    CreateFboTexture(app->depthAttachmentTexture,       app->displaySize, GL_UNSIGNED_BYTE);
    CreateFboTexture(app->positionAttachmentTexture,    app->displaySize, GL_UNSIGNED_BYTE);

    glGenTextures(1, &app->ssaoColorBuffer);
    glBindTexture(GL_TEXTURE_2D, app->ssaoColorBuffer);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, app->displaySize.x, app->displaySize.y, 0, GL_RGBA, GL_FLOAT, NULL);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    glBindTexture(GL_TEXTURE_2D, 0);

    glGenTextures(1, &app->depthAttachmentHandle);
    glBindTexture(GL_TEXTURE_2D, app->depthAttachmentHandle);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_DEPTH_COMPONENT24, app->displaySize.x, app->displaySize.y, 0, GL_DEPTH_COMPONENT, GL_FLOAT, NULL);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    glBindTexture(GL_TEXTURE_2D, 0);

    glGenFramebuffers(1, &app->framebufferHandle);
    glBindFramebuffer(GL_FRAMEBUFFER, app->framebufferHandle);
    glFramebufferTexture(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, app->finalRenderAttachmentTexture, 0);
    glFramebufferTexture(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT1, app->normalsAttachmentTexture, 0);
    glFramebufferTexture(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT2, app->albedoAttachmentTexture, 0);
    glFramebufferTexture(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT3, app->depthAttachmentTexture, 0);
    glFramebufferTexture(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT4, app->positionAttachmentTexture, 0);
    glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT5, GL_TEXTURE_2D, app->ssaoColorBuffer, 0);
    glFramebufferTexture(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, app->depthAttachmentHandle, 0);

    std::uniform_real_distribution<float> randomFloats(0.0, 1.0);
    std::default_random_engine generator;

    for (unsigned int i = 0; i < 64; ++i)
    {
        glm::vec3 sample(randomFloats(generator) * 2.0 - 1.0, randomFloats(generator) * 2.0 - 1.0, randomFloats(generator));

        sample = glm::normalize(sample);
        sample *= randomFloats(generator);

        float scale = float(i) / 64.0;

        scale = lerp(0.1f, 1.0f, scale * scale);
        sample *= scale;

        app->ssaoKernel.push_back(sample);
    }

    for (unsigned int i = 0; i < 16; ++i)
    {
        glm::vec3 noise(randomFloats(generator) * 2.0 - 1.0, randomFloats(generator) * 2.0 - 1.0, 0.0f);

        app->ssaoNoise.push_back(noise);
    }

    glGenTextures(1, &app->noiseTexture);
    glBindTexture(GL_TEXTURE_2D, app->noiseTexture);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, 4, 4, 0, GL_RGB, GL_FLOAT, &app->ssaoNoise[0]);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
    
    CheckFrameBufferStatus();

    glBindFramebuffer(GL_FRAMEBUFFER, 0);

    glGetIntegerv(GL_MAX_UNIFORM_BLOCK_SIZE, &app->uniformBufferMaxSize);
    glGetIntegerv(GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT, &app->uniformBufferAlignment);
    app->cbuffer = CreateConstantBuffer(app->uniformBufferMaxSize);

    // Geometry
    glGenBuffers(1, &app->embeddedVertices);
    glBindBuffer(GL_ARRAY_BUFFER, app->embeddedVertices);
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
    glBindBuffer(GL_ARRAY_BUFFER, 0);

    glGenBuffers(1, &app->embeddedElements);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, app->embeddedElements);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);

    // vaos
    glGenVertexArrays(1, &app->vao);
    glBindVertexArray(app->vao);
    glBindBuffer(GL_ARRAY_BUFFER, app->embeddedVertices);
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, sizeof(VertexV3V2), (void*)0);
    glEnableVertexAttribArray(0);
    glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, sizeof(VertexV3V2), (void*)12);
    glEnableVertexAttribArray(1);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, app->embeddedElements);
    glBindVertexArray(0);

    // programs
    app->texturedGeometryProgramIdx = LoadProgram(app, "shaders.glsl", "TEXTURED_GEOMETRY");
    Program& texturedMeshProgram = app->programs[app->texturedGeometryProgramIdx];
    app->programUniformTexture = glGetUniformLocation(texturedMeshProgram.handle, "uTexture");

    app->deferredGeometryPassProgramIdx = LoadProgram(app, "shaders.glsl", "GEOMETRY_PASS");
    app->texturedMeshProgramIdx = LoadProgram(app, "shaders.glsl", "SHOW_TEXTURED_MESH");
    app->blitBrightestPixelsProgram = LoadProgram(app, "shaders.glsl", "BRIGHTEST_PIXELS");
    app->blur = LoadProgram(app, "shaders.glsl", "BLUR");
    app->bloomProgram = LoadProgram(app, "shaders.glsl", "BLOOM");
    app->SSAOPassProgramIdx = LoadProgram(app, "shaders.glsl", "SSAO");
    app->SSAOBlurPassProgramIdx = LoadProgram(app, "shaders.glsl", "SSAO_BLUR");
    app->deferredShadingPassProgramIdx = LoadProgram(app, "shaders.glsl", "SHADING_PASS");

    // textures
    app->diceTexIdx = LoadTexture2D(app, "dice.png");
    app->whiteTexIdx = LoadTexture2D(app, "color_white.png");
    app->blackTexIdx = LoadTexture2D(app, "color_black.png");
    app->normalTexIdx = LoadTexture2D(app, "color_normal.png");
    app->magentaTexIdx = LoadTexture2D(app, "color_magenta.png");

    // models
    app->patrick = LoadModel(app, "Patrick/Patrick.obj");
    app->sphere = LoadModel(app, "Sphere/sphere.fbx");
    app->floor = LoadModel(app, "Floor/floor.fbx");
    app->cat = LoadModel(app, "Cat/12222_Cat_v1_l3.obj");

    // Create entities
    CreateEntity(app, vec3(0.0, -2.3, -2.0), app->cat, 0, 0);
    CreateEntity(app, vec3(5.0, 1.0, -5.0), app->patrick, 0, 0);
    CreateEntity(app, vec3(-5.0, 1.0, -5.0), app->patrick, 0, 0);
    CreateEntity(app, vec3(0.0, -2.2, 0.0), app->floor, 0, 0);

    // Create lights
    CreateDirectionalLight(app, vec3(1.0), vec3(5.0, 5.0, 5.0));
    CreateDirectionalLight(app, vec3(0.0,0.0,1.0), vec3(-5.0, 0.0, 0.0));

    CreatePointLight(app, vec3(1.0, 0.0, 0.0), vec3(0.0, -1.0, 1.5));
    CreatePointLight(app, vec3(0.0, 1.0, 0.0), vec3(-7.0, 0.0, -4.0));
    CreatePointLight(app, vec3(0.0, 0.0, 1.0), vec3(7.0, 0.0, -3.0));

    GLint nExtensions;
    glGetIntegerv(GL_NUM_EXTENSIONS, &nExtensions);
    for (int i = 0; i < nExtensions; ++i)
    {
        app->glExtensions.push_back((const char*)glGetStringi(GL_EXTENSIONS, GLuint(i)));
    }

    if (app->rtBright != 0) glDeleteTextures(1, &app->rtBright);
    glGenTextures(1, &app->rtBright);
    glBindTexture(GL_TEXTURE_2D, app->rtBright);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_BASE_LEVEL, MIPMAP_BASE_LEVEL);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAX_LEVEL, MIPMAP_MAX_LEVEL);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA16F, app->displaySize.x / 2, app->displaySize.y / 2, 0, GL_RGBA, GL_FLOAT, nullptr);
    glTexImage2D(GL_TEXTURE_2D, 1, GL_RGBA16F, app->displaySize.x / 4, app->displaySize.y / 4, 0, GL_RGBA, GL_FLOAT, nullptr);
    glTexImage2D(GL_TEXTURE_2D, 2, GL_RGBA16F, app->displaySize.x / 8, app->displaySize.y / 8, 0, GL_RGBA, GL_FLOAT, nullptr);
    glTexImage2D(GL_TEXTURE_2D, 3, GL_RGBA16F, app->displaySize.x / 16, app->displaySize.y / 16, 0, GL_RGBA, GL_FLOAT, nullptr);
    glTexImage2D(GL_TEXTURE_2D, 4, GL_RGBA16F, app->displaySize.x / 32, app->displaySize.y / 32, 0, GL_RGBA, GL_FLOAT, nullptr);
    glGenerateMipmap(GL_TEXTURE_2D);

    if (app->rtBloomH != 0) glDeleteTextures(1, &app->rtBloomH);
    glGenTextures(1, &app->rtBloomH);
    glBindTexture(GL_TEXTURE_2D, app->rtBloomH);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_BASE_LEVEL, MIPMAP_BASE_LEVEL);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAX_LEVEL, MIPMAP_MAX_LEVEL);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA16F, app->displaySize.x / 2, app->displaySize.y / 2, 0, GL_RGBA, GL_FLOAT, nullptr);
    glTexImage2D(GL_TEXTURE_2D, 1, GL_RGBA16F, app->displaySize.x / 4, app->displaySize.y / 4, 0, GL_RGBA, GL_FLOAT, nullptr);
    glTexImage2D(GL_TEXTURE_2D, 2, GL_RGBA16F, app->displaySize.x / 8, app->displaySize.y / 8, 0, GL_RGBA, GL_FLOAT, nullptr);
    glTexImage2D(GL_TEXTURE_2D, 3, GL_RGBA16F, app->displaySize.x / 16, app->displaySize.y / 16, 0, GL_RGBA, GL_FLOAT, nullptr);
    glTexImage2D(GL_TEXTURE_2D, 4, GL_RGBA16F, app->displaySize.x / 32, app->displaySize.y / 32, 0, GL_RGBA, GL_FLOAT, nullptr);
    glGenerateMipmap(GL_TEXTURE_2D);

    glGenFramebuffers(1, &app->fboBloom1);
    glBindFramebuffer(GL_FRAMEBUFFER, app->fboBloom1);
    glFramebufferTexture(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, app->rtBright, 0);
    glFramebufferTexture(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT1, app->rtBloomH, 0);
    CheckFrameBufferStatus();
    glBindFramebuffer(GL_FRAMEBUFFER, 0);

    glGenFramebuffers(1, &app->fboBloom2);
    glBindFramebuffer(GL_FRAMEBUFFER, app->fboBloom2);
    glFramebufferTexture(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, app->rtBright, 1);
    glFramebufferTexture(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT1, app->rtBloomH, 1);
    CheckFrameBufferStatus();
    glBindFramebuffer(GL_FRAMEBUFFER, 0);

    glGenFramebuffers(1, &app->fboBloom3);
    glBindFramebuffer(GL_FRAMEBUFFER, app->fboBloom3);
    glFramebufferTexture(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, app->rtBright, 2);
    glFramebufferTexture(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT1, app->rtBloomH, 2);
    CheckFrameBufferStatus();
    glBindFramebuffer(GL_FRAMEBUFFER, 0);

    glGenFramebuffers(1, &app->fboBloom4);
    glBindFramebuffer(GL_FRAMEBUFFER, app->fboBloom4);
    glFramebufferTexture(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, app->rtBright, 3);
    glFramebufferTexture(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT1, app->rtBloomH, 3);
    CheckFrameBufferStatus();
    glBindFramebuffer(GL_FRAMEBUFFER, 0);

    glGenFramebuffers(1, &app->fboBloom5);
    glBindFramebuffer(GL_FRAMEBUFFER, app->fboBloom5);
    glFramebufferTexture(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, app->rtBright, 4);
    glFramebufferTexture(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT1, app->rtBloomH, 4);
    CheckFrameBufferStatus();
    glBindFramebuffer(GL_FRAMEBUFFER, 0);

    app->mode = Mode_FinalRender;
}

void Gui(App* app)
{
    if (app->showInfo)
    {
        ImGui::Begin("Console");
        app->console->Update();
        ImGui::End();

        ImGui::Begin("Info");

        ImGui::Text("FPS: %f", 1.0f / app->deltaTime);

        ImGui::Separator();

        ImGui::Text("OpenGL version: %s", app->openGlVersion);
        ImGui::Text("OpenGL renderer: %s", app->gpuName);
        ImGui::Text("OpenGL vendor: %s", app->vendor);
        ImGui::Text("GLSL version: %s", app->glslVersion);

        ImGui::Separator();

        ImGui::Text("Camera");
        ImGui::InputFloat3("Position", glm::value_ptr(app->mainCamera.position), "%.3f", ImGuiInputTextFlags_ReadOnly);
        static float speed = 10.0f;
        ImGui::InputFloat("Speed", &speed, 1.0f, 0.0f, "%.3f");
        static float fov = 60.0f;
        ImGui::InputFloat("fov", &fov, 1.0f, 0.0f, "%.3f");
        static float nearPlane = 0.1f;
        ImGui::InputFloat("nearPlane", &nearPlane, 1.0f, 0.0f, "%.3f");
        static float farPlane = 100.0f;
        ImGui::InputFloat("farPlane", &farPlane, 1.0f, 0.0f, "%.3f");

        if (speed < 0.0f) speed = 0.0f;
        if (fov < 0.0f) fov = 0.0f;
        if (nearPlane < 0.0f) nearPlane = 0.0f;
        if (farPlane < 0.0f) farPlane = 0.0f;

        app->mainCamera.speed = speed;
        app->mainCamera.fov = fov;
        app->mainCamera.nearPlane = nearPlane;
        app->mainCamera.farPlane = farPlane;

        ImGui::Separator();

        ImGui::Text("Bloom");
        ImGui::Checkbox("renderBloom", &app->renderBloom);

        ImGui::DragFloat("Threshold", &app->bloomThreshold, 0.05f, 0.0, 1.0, "%.2f");
        ImGui::InputInt("Kernel Radius", &app->kernelRadius);
        ImGui::InputInt("LOD 0 Intensity", &app->lodIntensity0);
        ImGui::InputInt("LOD 1 Intensity", &app->lodIntensity1);
        ImGui::InputInt("LOD 2 Intensity", &app->lodIntensity2);
        ImGui::InputInt("LOD 3 Intensity", &app->lodIntensity3);
        ImGui::InputInt("LOD 4 Intensity", &app->lodIntensity4);

        ImGui::Separator();

        ImGui::Checkbox("SSAO", &app->SSAO);
        ImGui::DragFloat("Radius", &app->radius, 0.001f, 0.0, 10.5);
        ImGui::DragFloat("Bias", &app->bias, 0.001f, 0.0, 0.1, "%.3f");
        
        ImGui::Separator();

        //ComboBox with different modes as required by the teacher
        ImGui::Text("Render Mode");
        static const char* items[]{"Deferred render", "Forward Render", "Albedo", "Depth", "Normals", "Position"};
        //static int combo_item = 0;   //This var stores the currently selected combo item
        ImGui::Combo("Mode", &app->comboItem, items, IM_ARRAYSIZE(items));
        
        if (app->comboItem == 0)
            app->mode = Mode::Mode_FinalRender;
        
        else if (app->comboItem == 1)
            app->mode = Mode::Mode_ForwardRender;

        else if (app->comboItem == 2)
            app->mode = Mode::Mode_Albedo;

        else if (app->comboItem == 3)
            app->mode = Mode::Mode_Depth;

        else if (app->comboItem == 4)
            app->mode = Mode::Mode_Normals;

        else if (app->comboItem == 5)
            app->mode = Mode::Mode_Position;

        ImGui::Separator();

        ImGui::Text("GLSL extensions:");
        ImGui::BeginChild("Extensions:", { 0, 0 }, false, ImGuiWindowFlags_AlwaysVerticalScrollbar);
        for (int i = 0; i < app->glExtensions.size(); ++i)
        {
            ImGui::Text("%s ", app->glExtensions[i].c_str());
        }
        ImGui::EndChild();

        ImGui::Separator();

        ImGui::End();
    }
}

void Update(App* app)
{
    // You can handle app->input keyboard/mouse here
    if (app->input.keys[K_I] == BUTTON_PRESS)
        app->showInfo = !app->showInfo;
    
    for (u64 i = 0; i < app->programs.size(); ++i)
    {
        Program& program = app->programs[i];
        u64 currentTimestamp = GetFileLastWriteTimestamp(program.filepath.c_str());
        if (currentTimestamp > program.lastWriteTimestamp)
        {
            glDeleteProgram(program.handle);
            String programSource = ReadTextFile(program.filepath.c_str());
            const char* programName = program.programName.c_str();
            program.handle = CreateProgramFromSource(programSource, programName);
            program.lastWriteTimestamp = currentTimestamp;
        }
    }

    Camera& camera = app->mainCamera;
    
    camera.speed *= app->deltaTime;
    
    if (app->input.mouseButtons[LEFT])
    {
        glm::mat4x4 rotationX = glm::rotate(-app->input.mouseDelta.x * 0.5f * app->deltaTime, glm::normalize(vec3(0,1,0)));
        glm::mat4x4 rotationY = glm::rotate(-app->input.mouseDelta.y * 0.5f * app->deltaTime, glm::normalize(vec3(1,0,0)));
        glm::mat4x4 transform = glm::translate(vec3(0)) * rotationX * rotationY * glm::translate(-vec3(0));

        app->mainCamera.position = glm::vec3(transform * glm::vec4(app->mainCamera.position, 1));
        app->mainCamera.target = glm::vec3(transform * glm::vec4(app->mainCamera.target, 1));
    }

    vec3 newPos(0.0f);  
    vec3 dir = glm::normalize(app->mainCamera.target - app->mainCamera.position);

    if (app->input.keys[K_W] == BUTTON_PRESSED) 
        newPos += app->mainCamera.speed * dir;
    
    if (app->input.keys[K_S] == BUTTON_PRESSED) 
        newPos -= app->mainCamera.speed * dir;

    if (app->input.keys[K_D] == BUTTON_PRESSED) 
        newPos += app->mainCamera.speed * vec3(-dir.z, 0, dir.x);
    
    if (app->input.keys[K_A] == BUTTON_PRESSED) 
        newPos -= app->mainCamera.speed * vec3(-dir.z, 0, dir.x);

    if (app->input.keys[K_E] == BUTTON_PRESSED) 
        newPos.y += app->mainCamera.speed;
    
    if (app->input.keys[K_Q] == BUTTON_PRESSED) 
        newPos.y -= app->mainCamera.speed;

    app->mainCamera.target += newPos;
    app->mainCamera.position += newPos;

    camera.cameraMatrix = glm::lookAt(camera.position, camera.target, camera.up);
    camera.projectionMatrix = glm::perspective(glm::radians(camera.fov), (float)(app->displaySize.x / app->displaySize.y), camera.nearPlane, camera.farPlane);

    MapBuffer(app->cbuffer, GL_WRITE_ONLY);
    app->globalParamsOffset = app->cbuffer.head;

    PushVec3(app->cbuffer, camera.position);
    PushUInt(app->cbuffer, app->lights.size());

    for (u32 i = 0; i < app->lights.size(); ++i)
    {
        AlignHead(app->cbuffer, sizeof(vec4));

        Light& light = app->lights[i];
        PushUInt(app->cbuffer, light.type);
        PushVec3(app->cbuffer, light.color);
        PushVec3(app->cbuffer, light.direction);
        PushVec3(app->cbuffer, light.position);
    }

    app->globalParamsSize = app->cbuffer.head - app->globalParamsOffset;

    for (u32 i = 0; i < app->entities.size(); ++i)
    {
        Entity& entity = app->entities[i];
        glm::mat4 worldViewProjectionMatrix = camera.projectionMatrix * camera.cameraMatrix * entity.worldMatrix;

        AlignHead(app->cbuffer, app->uniformBufferAlignment);
        entity.localParamsOffset = app->cbuffer.head;

        PushMat4(app->cbuffer, entity.worldMatrix);
        PushMat4(app->cbuffer, worldViewProjectionMatrix);

        entity.localParamsSize = app->cbuffer.head - entity.localParamsOffset;
    }

    UnmapBuffer(app->cbuffer);
}

void passBlur(App* app, GLuint pfbo, const glm::vec2& viewportSize, GLenum colorAttachment, GLuint inputTexture, GLint inputLod, const glm::vec2& direction)
{
    glBindFramebuffer(GL_FRAMEBUFFER, pfbo);
    glDrawBuffer(colorAttachment);
    glViewport(0, 0, viewportSize.x, viewportSize.y);

    glDisable(GL_DEPTH_TEST);
    glDisable(GL_BLEND);

    Program& program = app->programs[app->blur];
    glUseProgram(program.handle);

    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, inputTexture);
    glUniform1i(glGetUniformLocation(program.handle, "colorMap"), 0);
    glUniform1i(glGetUniformLocation(program.handle, "inputLod"), inputLod);
    glUniform1i(glGetUniformLocation(program.handle, "kernelRadius"), app->kernelRadius);
    glUniform2i(glGetUniformLocation(program.handle, "direction"), direction.x, direction.y);

    GLuint VAO = 0;
    GLuint VBO;

    if (VAO == 0)
    {
        glGenVertexArrays(1, &VAO);
        glGenBuffers(1, &VBO);
        glBindVertexArray(VAO);
        glBindBuffer(GL_ARRAY_BUFFER, VBO);
        glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), &vertices, GL_STATIC_DRAW);
        glEnableVertexAttribArray(0);
        glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);
        glEnableVertexAttribArray(1);
        glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));
    }

    glBindVertexArray(VAO);
    glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);
    glBindVertexArray(0);

    glUseProgram(0);
    glBindFramebuffer(GL_FRAMEBUFFER, 0);

    glEnable(GL_DEPTH_TEST);
    glEnable(GL_BLEND);
}

void passBloom(App* app, GLuint fbo, GLenum colorAttachment, GLuint inputTexture, int maxLod)
{
    glBindFramebuffer(GL_FRAMEBUFFER, fbo);
    glDrawBuffer(colorAttachment);
    glViewport(0, 0, app->displaySize.x, app->displaySize.y);

    glDisable(GL_DEPTH_TEST);
    glEnable(GL_BLEND);
    glBlendFunc(GL_ONE, GL_ONE);

    Program& program = app->programs[app->bloomProgram];
    glUseProgram(program.handle);

    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, inputTexture);
    glUniform1i(glGetUniformLocation(program.handle, "colorMap"), 0);
    glUniform1i(glGetUniformLocation(program.handle, "maxLod"), maxLod);
    glUniform1i(glGetUniformLocation(program.handle, "lodI0"), app->lodIntensity0);
    glUniform1i(glGetUniformLocation(program.handle, "lodI1"), app->lodIntensity1);
    glUniform1i(glGetUniformLocation(program.handle, "lodI2"), app->lodIntensity2);
    glUniform1i(glGetUniformLocation(program.handle, "lodI3"), app->lodIntensity3);
    glUniform1i(glGetUniformLocation(program.handle, "lodI4"), app->lodIntensity4);

    GLuint VAO = 0;
    GLuint VBO;

    if (VAO == 0)
    {
        glGenVertexArrays(1, &VAO);
        glGenBuffers(1, &VBO);
        glBindVertexArray(VAO);
        glBindBuffer(GL_ARRAY_BUFFER, VBO);
        glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), &vertices, GL_STATIC_DRAW);
        glEnableVertexAttribArray(0);
        glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);
        glEnableVertexAttribArray(1);
        glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));
    }

    glBindVertexArray(VAO);
    glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);
    glBindVertexArray(0);

    glUseProgram(0);
    glBindFramebuffer(GL_FRAMEBUFFER, 0);

    glBlendFunc(GL_ONE, GL_ZERO);
    glEnable(GL_DEPTH_TEST);
}

void passBlitBrightPixels(App* app, GLuint fbo, const glm::uvec2& viewportSize, GLenum colorAttachment, GLuint inputTexture)
{
    glBindFramebuffer(GL_FRAMEBUFFER, fbo);
    glDrawBuffer(colorAttachment);
    glViewport(0, 0, viewportSize.x, viewportSize.y);

    Program& program = app->programs[app->blitBrightestPixelsProgram];
    glUseProgram(program.handle);

    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, inputTexture);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glUniform1i(glGetUniformLocation(program.handle, "colorTexture"), 0);
    glUniform1f(glGetUniformLocation(program.handle, "threshold"), app->bloomThreshold);

    GLuint VAO = 0;
    GLuint VBO;

    if (VAO == 0)
    {
        glGenVertexArrays(1, &VAO);
        glGenBuffers(1, &VBO);
        glBindVertexArray(VAO);
        glBindBuffer(GL_ARRAY_BUFFER, VBO);
        glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), &vertices, GL_STATIC_DRAW);
        glEnableVertexAttribArray(0);
        glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);
        glEnableVertexAttribArray(1);
        glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));
    }

    glBindVertexArray(VAO);
    glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);
    glBindVertexArray(0);

    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    glUseProgram(0);
}

void passSSAO(App* app)
{
    Program& program = app->programs[app->SSAOPassProgramIdx];
    glUseProgram(program.handle);

    GLuint SSAO = app->SSAO == true ? 1 : 0;
    glUniform1f(glGetUniformLocation(program.handle, "SSAO"), (float)SSAO);
    glUniform1f(glGetUniformLocation(program.handle, "Radius"), (float)app->radius);
    glUniform1f(glGetUniformLocation(program.handle, "Bias"), (float)app->bias);

    for (unsigned int i = 0; i < 64; ++i)
    {
        std::string name = "samples[" + std::to_string(i) + "]";
        glUniform3fv(glGetUniformLocation(program.handle, name.c_str()), 64, value_ptr(app->ssaoKernel[i]));
    }

    glUniformMatrix4fv(glGetUniformLocation(program.handle, "projection"), 1, GL_FALSE, value_ptr(app->mainCamera.projectionMatrix));

    glUniform1i(glGetUniformLocation(program.handle, "gPosition"), 0);
    glUniform1i(glGetUniformLocation(program.handle, "gNormal"), 1);
    glUniform1i(glGetUniformLocation(program.handle, "texNoise"), 2);

    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, app->positionAttachmentTexture);
    glActiveTexture(GL_TEXTURE1);
    glBindTexture(GL_TEXTURE_2D, app->normalsAttachmentTexture);
    glActiveTexture(GL_TEXTURE2);
    glBindTexture(GL_TEXTURE_2D, app->noiseTexture);

    glDepthMask(false);
    
    GLuint VAO = 0;
    GLuint VBO;

    if (VAO == 0)
    {
        glGenVertexArrays(1, &VAO);
        glGenBuffers(1, &VBO);
        glBindVertexArray(VAO);
        glBindBuffer(GL_ARRAY_BUFFER, VBO);
        glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), &vertices, GL_STATIC_DRAW);
        glEnableVertexAttribArray(0);
        glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);
        glEnableVertexAttribArray(1);
        glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));
    }

    glBindVertexArray(VAO);
    glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);
    glBindVertexArray(0);

    glDepthMask(true);
}

void passSSAOBlur(App* app)
{
    Program& program = app->programs[app->SSAOBlurPassProgramIdx];
    glUseProgram(program.handle);

    glUniform1i(glGetUniformLocation(program.handle, "ssaoInput"), 0);

    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, app->ssaoColorBuffer);
}

void Render(App* app)
{
    // Clear color and depth 
    glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    GLuint attachments[] =
    {
        GL_COLOR_ATTACHMENT0,
        GL_COLOR_ATTACHMENT1,
    };

    glBindFramebuffer(GL_FRAMEBUFFER, app->fboBloom1);
    glDrawBuffers(ARRAY_COUNT(attachments), attachments);
   
    glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glBindFramebuffer(GL_FRAMEBUFFER, 0);

    // Render on this framebuffer render targets
    glBindFramebuffer(GL_FRAMEBUFFER, app->framebufferHandle);

    // Select on which render targets to draw
    GLuint drawBuffers[] =
    {
        GL_COLOR_ATTACHMENT0,
        GL_COLOR_ATTACHMENT1,
        GL_COLOR_ATTACHMENT2,
        GL_COLOR_ATTACHMENT3,
        GL_COLOR_ATTACHMENT4,            
        GL_COLOR_ATTACHMENT5,
    };

    glDrawBuffers(ARRAY_COUNT(drawBuffers), drawBuffers);

    // Clear color and depth 
    glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    glViewport(0, 0, app->displaySize.x, app->displaySize.y);

    glBindBufferRange(GL_UNIFORM_BUFFER, BINDING(0), app->cbuffer.handle, app->globalParamsOffset, app->globalParamsSize);

    Program& deferredGeometry = app->programs[app->deferredGeometryPassProgramIdx];

    if (app->mode == Mode::Mode_ForwardRender)
        deferredGeometry = app->programs[app->texturedMeshProgramIdx];

    glUseProgram(deferredGeometry.handle);

    for (u32 i = 0; i < app->entities.size(); ++i)
    {
        Entity& entity = app->entities[i];
        Model& model = app->models[entity.modelIndex];
        Mesh& mesh = app->meshes[model.meshIdx];

        glBindBufferRange(GL_UNIFORM_BUFFER, BINDING(1), app->cbuffer.handle, entity.localParamsOffset, entity.localParamsSize);
        glEnable(GL_DEPTH_TEST);

        for (u32 i = 0; i < mesh.submeshes.size(); ++i)
        {
            GLuint vao = FindVAO(mesh, i, deferredGeometry);
            glBindVertexArray(vao);

            u32 submeshMaterialIdx = model.materialIdx[i];
            Material& submeshMaterial = app->materials[submeshMaterialIdx];

            glActiveTexture(GL_TEXTURE0);
            glBindTexture(GL_TEXTURE_2D, app->textures[submeshMaterial.albedoTextureIdx].handle);

            Submesh& submesh = mesh.submeshes[i];
            glDrawElements(GL_TRIANGLES, submesh.indices.size(), GL_UNSIGNED_INT, (void*)submesh.indexOffset);
        }
    }
    
    if (app->mode == Mode_FinalRender)
    {
        passSSAO(app);
        passSSAOBlur(app);

        Program& deferredShading = app->programs[app->deferredShadingPassProgramIdx];
        glUseProgram(deferredShading.handle);

        glUniform1i(glGetUniformLocation(deferredShading.handle, "oNormals"),   0);
        glUniform1i(glGetUniformLocation(deferredShading.handle, "oAlbedo"),    1);
        glUniform1i(glGetUniformLocation(deferredShading.handle, "oDepth"),     2);
        glUniform1i(glGetUniformLocation(deferredShading.handle, "oPosition"),  3);
        glUniform1i(glGetUniformLocation(deferredShading.handle, "oOcclusion"), 4);

        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D, app->normalsAttachmentTexture);
        glActiveTexture(GL_TEXTURE1);
        glBindTexture(GL_TEXTURE_2D, app->albedoAttachmentTexture);
        glActiveTexture(GL_TEXTURE2);
        glBindTexture(GL_TEXTURE_2D, app->depthAttachmentTexture);
        glActiveTexture(GL_TEXTURE3);
        glBindTexture(GL_TEXTURE_2D, app->positionAttachmentTexture);
        glActiveTexture(GL_TEXTURE4);
        glBindTexture(GL_TEXTURE_2D, app->ssaoColorBuffer);

        glDrawBuffer(GL_COLOR_ATTACHMENT0);

        GLuint VAO = 0;
        GLuint VBO;

        if (VAO == 0)
        {
            glGenVertexArrays(1, &VAO);
            glGenBuffers(1, &VBO);
            glBindVertexArray(VAO);
            glBindBuffer(GL_ARRAY_BUFFER, VBO);
            glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), &vertices, GL_STATIC_DRAW);
            glEnableVertexAttribArray(0);
            glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);
            glEnableVertexAttribArray(1);
            glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));
        }

        glBindVertexArray(VAO);
        glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);
        glBindVertexArray(0);
    }

    glDepthMask(true);
    glBindFramebuffer(GL_FRAMEBUFFER, 0);

    if (app->renderBloom && app->mode == Mode::Mode_FinalRender)
    {
#define LOD(x) x

        const glm::uvec2 horizontal(1.0, 0.0);
        const glm::uvec2 vertical(0.0, 1.0);

        const float w = app->displaySize.x;
        const float h = app->displaySize.y;

        // horizontal blur
        float threshold = 1.0;
        passBlitBrightPixels(app, app->fboBloom1, glm::uvec2(w / 2, h / 2), GL_COLOR_ATTACHMENT0, app->finalRenderAttachmentTexture);
        glBindTexture(GL_TEXTURE_2D, app->rtBright);
        glGenerateMipmap(GL_TEXTURE_2D);

        // horizontal blur
        passBlur(app, app->fboBloom1, glm::vec2(w / 2, h / 2),     GL_COLOR_ATTACHMENT1, app->rtBright, LOD(0), horizontal);
        passBlur(app, app->fboBloom2, glm::vec2(w / 4, h / 4),     GL_COLOR_ATTACHMENT1, app->rtBright, LOD(1), horizontal);
        passBlur(app, app->fboBloom3, glm::vec2(w / 8, h / 8),     GL_COLOR_ATTACHMENT1, app->rtBright, LOD(2), horizontal);
        passBlur(app, app->fboBloom4, glm::vec2(w / 16, h / 16),   GL_COLOR_ATTACHMENT1, app->rtBright, LOD(3), horizontal);
        passBlur(app, app->fboBloom5, glm::vec2(w / 32, h / 32),   GL_COLOR_ATTACHMENT1, app->rtBright, LOD(4), horizontal);

        // vertical blur
        passBlur(app, app->fboBloom1, glm::vec2(w / 2, h / 2),     GL_COLOR_ATTACHMENT0, app->rtBloomH, LOD(0), vertical);
        passBlur(app, app->fboBloom2, glm::vec2(w / 4, h / 4),     GL_COLOR_ATTACHMENT0, app->rtBloomH, LOD(1), vertical);
        passBlur(app, app->fboBloom3, glm::vec2(w / 8, h / 8),     GL_COLOR_ATTACHMENT0, app->rtBloomH, LOD(2), vertical);
        passBlur(app, app->fboBloom4, glm::vec2(w / 16, h / 16),   GL_COLOR_ATTACHMENT0, app->rtBloomH, LOD(3), vertical);
        passBlur(app, app->fboBloom5, glm::vec2(w / 32, h / 32),   GL_COLOR_ATTACHMENT0, app->rtBloomH, LOD(4), vertical);

        passBloom(app, app->framebufferHandle, GL_COLOR_ATTACHMENT0, app->rtBloomH, 4);

#undef LOD
    }

    Program& texturedGeometryProgram = app->programs[app->texturedGeometryProgramIdx];
    glUseProgram(texturedGeometryProgram.handle);
    glBindVertexArray(app->vao);

    glUniform1i(app->programUniformTexture, 0);
    glActiveTexture(GL_TEXTURE0);

    switch (app->mode)
    {
        case Mode::Mode_FinalRender:
        {
            glBindTexture(GL_TEXTURE_2D, app->finalRenderAttachmentTexture);
            break;
        }

        case Mode::Mode_ForwardRender:
        {
            glBindTexture(GL_TEXTURE_2D, app->finalRenderAttachmentTexture);
            break;
        }

        case Mode::Mode_Normals:
        {
            glBindTexture(GL_TEXTURE_2D, app->normalsAttachmentTexture);
            break;
        }

        case Mode::Mode_Albedo:
        {
            glBindTexture(GL_TEXTURE_2D, app->albedoAttachmentTexture);
            break;
        }

        case Mode::Mode_Depth:
        {
            glBindTexture(GL_TEXTURE_2D, app->depthAttachmentTexture);
            break;
        }
        case Mode::Mode_Position:
        {
            glBindTexture(GL_TEXTURE_2D, app->positionAttachmentTexture);
            break;
        }

        default: break;
    }

    glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_SHORT, 0);
    glBindVertexArray(0);
    glUseProgram(0);
}

void CreateFboTexture(GLuint& textureHandle, ivec2 displaySize, GLint type)
{
    glGenTextures(1, &textureHandle);
    glBindTexture(GL_TEXTURE_2D, textureHandle);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, displaySize.x, displaySize.y, 0, GL_RGBA, type, NULL);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    glBindTexture(GL_TEXTURE_2D, 0);
}

